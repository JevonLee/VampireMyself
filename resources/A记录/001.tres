[gd_resource type="Resource" script_class="Record" load_steps=2 format=3 uid="uid://b63pgoy4mj560"]

[ext_resource type="Script" uid="uid://cwxpuvgm76mrs" path="res://resources/A记录/record.gd" id="1_ifjtf"]

[resource]
script = ExtResource("1_ifjtf")
records = Array[String](["学会了使用lerp插值实现加速度的感觉，让掉落物飞向玩家,这就是一个数学上的函数，有线性和非线性，并且与帧率相关，帧率越高越平滑,lerp_angle是旋转的插值函数。这个lerp有直接使用的形式，和Vector2.lerp的形式，二者参数个数不同，参数类型也不同，后者是强类型，遵循类型安全", "学会了使用randf实现概率掉落物品", "学会了使用数组的pick_random实现随机掉落", "学会了Vector2.RIGHT.rotated(randf_range(0,TAU))实现圆周", "xxx_manager的方式实现接口和实现类的面向对象原则，以及一个物品的场景素材脚本用一个文件夹的管理方式，使用对象依赖的方式实现接口与实现类之间，接口与接口之间的调用", "在upgrade_manager和对应UI那里，UI只负责检测事件，信号传了两层虽然很麻烦，但是具体功能在manager里实现，遵循了单一职责原则，后续开发更加方便管理。manager类节点基本上是监听信号，观察者模式", "对于两个或几个无法关联到一起的场景或脚本可以使用autoload脚本的方式传递。这里点击UI和升级剑的能力之间，以及我之前实现箱子和背包之间", "从sword_ability_controller可以看出泰拉瑞亚的攻速组成，useTime是实际产生效果的时间，useAnimation是动画的时间", "对于需要从场景树快速获得的节点，group功能再好不过了", "所有弹窗都是实例化场景，而不是控制其visible，在先前的项目中得知，visible并不好控制。", "四个小时的视频基本上完成了核心内容，后面十几个小时是对功能的完善，以及添加动画、特效、音效等。实现的核心内容主要有：玩家、敌人、敌人生成、hit&hurt组件、血条组件、剑的生成、物品掉落（随机掉落，概率掉落）、资源数据实现属性提升。", "今天学会了添加剑的能力，在upgrade_manager的upgrade_pool数组里添加新的能力，点击卡片之后，通过GameEvents中额外的信号，可以将对应的controller添加到abilities节点下面，player里接受信号进行处理。", "如果是水果骑士，在player添加weapons节点，current_item装备对应武器item之后，通过信号将item的weapon场景添加到weapons节点下面，至于为什么不是weapon_controller场景还需后面考虑，因为目前我感觉这个controller不是很有必要，controller控制的武器是定时出现需要生成weapon实例，而水果骑士可能是土豆兄弟哪些，装备之后直接生成weapon实例，装备在手上", "对于上面的，我认为controller还是有必要的，具体的分情况吧，如果添加对应的武器还需要添加UI等其他场景，controller管理起来很方便", "使用sign函数，来将正负值归一化。", "组合和继承：组合的优点灵活，继承的优点方便。对于很明显的相同类别可以抽象出父类动物，比如猫和狗，他们的行为基本相似。对于没有明显相同的类别使用组合，比如敌人和宝箱，都可以掉落物品，但他们很显然只有掉落物品是重复的，那么就可以吧掉落物品抽象成一个组件。对于传统继承，如果子类在后续不可预料的功能越加越多，那么父类为了满足需求就会变得臃肿，比如一个动物满足猫狗的基本行为，这时想添加一条鱼和一个鸟，如果给父类加上飞和游的方法，再加一些判断避免猫狗使用这些代码，那么动物类就会很臃肿，目前看来可以接受，那后续添加更多不同类型的动物呢，这时就可以组合和继承混合使用，把飞和游都做成组件，鸟和鱼继承动物，飞和游组件分别加到他们各自身上，之和和他们类似的动物可以继承鸟或鱼。说人话就是子类只继承和实现父类的共性，只有共性的部分才抽象出来，而特性则作为组件添加到他们身上。更直白一点就是写mod，通过继承可以实现实现基础的物品和武器，如果想要更华丽的特效则是再这个武器上添加，而不是抽象出来加在父类上。", "一个物体的死亡动画或效果可以抽象成组件，在其父节点释放之后，reparent更改父节点为场景树已存在的节点", "学会了加权概率表，原理就是，在权值总和范围内取随机值，再遍历每一个物品，和累计的权值和比较，权值高的在总和中占比也高。", "对tween动画有个更直观的了解，https://easings.net/可以显示过度的效果。可以在项目设置里全局设置主题UI。tween动画相比animationplayer，可以在tweenmethod里执行更多操作，如插值，贝塞尔曲线等。
这个课程对于tween的讲解也是相当丰富，对于一些固定的动画可以使用animationPlayer快速操作，一些根据游戏实际情况做出改变的动画用tween可以接受一些变量参数更好", "hitflashcomponent有tween设置shader参数的样例，material有processmeterial和shadermaterial，只有后者有set_shader_parameter()，怪不得之前一直没有这个提示。", "只要保持单一职责原则，即便代码写的很乱，也可以很好的整理，可以将不必要的代码直接扔掉重写，在实际开发中难免会反复修改，所以学习好的代码习惯，以便可拓展以及修改。", "这节课的主要内容是解决给斧头增加伤害的资源但是没有斧头时的解决办法，使用加权表类型的upgrade_pool取代原来的数组upgrade_pool，这也将实现随机物品的加权出现概率（之前的加权表的应用是怪物出现的概率），", "对于武器的controller还是很有必要的，面向接口编程，武器，粒子，弹幕的生成管理都可以在controller里统一完成，音效还是放在武器代码里，多状态武器在不同状态下播放不同音效，这样好管理一些，具体情况实际分析。", "相同节点，在检视器面板那里可以右键扳手符号，复制属性。", "通过DisplayServer单例设置窗口模式，通过一个0-1的小数值设置音量db大小", "在开始菜单到设置菜单那里，展示了如何添加实例子节点，然后通过信号绑定参数释放子节点", "场景过度，在原本场景转换的代码中添加过度函数调用，单例模式的函数调用", "我现在知道为什么将伤害这些数值设置在controller上了，首先这个节点在player子节点下，如果要对所有武器进行伤害提升，这样就非常好操作。", "存档可以使用全局的监听器监听关键数据，然后再使用存档管理器单例在关键的地方进行存档，存档还是通过变量写文件的方式，对于一些永久保存的数据，写文件是个好办法", ""])
metadata/_custom_type_script = "uid://cwxpuvgm76mrs"
